<template>
  <!-- ... -->
  
  <!-- Full Report Modal -->
  <div v-if="showFullReportModal" class="modal-overlay" @click="closeFullReportModal">
    <div class="modal-content" @click.stop>
      <div class="modal-header">
        <h3>ðŸ“Š Full Collector Report</h3>
        <button @click="closeFullReportModal" class="close-btn">&times;</button>
      </div>
      
      <div class="modal-body" v-if="selectedCollectorReport">
        <!-- Collector Info Header -->
        <div class="collector-report-header">
          <div class="collector-info-large">
            <h4>{{ selectedCollectorReport.collector_name || selectedCollectorReport.collector_its_id }}</h4>
            <p>ITS ID: {{ selectedCollectorReport.collector_its_id }}</p>
          </div>
          <div class="collector-summary-stats">
            <div class="summary-stat">
              <div class="stat-number">{{ selectedCollectorReport.total_donations }}</div>
              <div class="stat-label">Total Donations</div>
            </div>
            <div class="summary-stat">
              <div class="stat-number">{{ selectedCollectorReport.total_sessions }}</div>
              <div class="stat-label">Sessions</div>
            </div>
            <div class="summary-stat">
              <div class="stat-number">{{ getReconciledSessionsCount(selectedCollectorReport.collector_its_id) }}</div>
              <div class="stat-label">Reconciled</div>
            </div>
          </div>
        </div>
        
        <!-- Currency Breakdown -->
        <div class="report-section">
          <h5>ðŸ’° Currency Breakdown</h5>
          <div class="currency-breakdown-detailed">
            <div v-for="currency in selectedCollectorReport.currencies" :key="currency.currency" class="currency-detail-row">
              <div class="currency-symbol-large">{{ currency.currency_symbol }}</div>
              <div class="currency-details">
                <div class="currency-name">{{ currency.currency }}</div>
                <div class="currency-amount-large">{{ formatCurrencyAmount(currency.total_amount, currency.currency) }}</div>
                <div class="currency-donations">{{ currency.donation_count }} donations</div>
              </div>
              <div class="currency-percentage">
                {{ calculateCurrencyPercentage(currency.donation_count, selectedCollectorReport.total_donations) }}%
              </div>
            </div>
          </div>
        </div>
        
        <!-- Session Details -->
        <div class="report-section">
          <h5>ðŸ“… Session Details</h5>
          <div class="session-details-table">
            <table>
              <thead>
                <tr>
                  <th>Date</th>
                  <th>Duration</th>
                  <th>Status</th>
                  <th>Reconciliation</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <tr v-for="session in getCollectorSessions(selectedCollectorReport.collector_its_id)" :key="session.id">
                  <td>{{ formatDate(session.session_date) }}</td>
                  <td>
                    {{ formatTime(session.started_at) }} - 
                    {{ session.ended_at ? formatTime(session.ended_at) : 'Active' }}
                  </td>
                  <td>
                    <span :class="'status-badge ' + session.status">{{ session.status }}</span>
                  </td>
                  <td>
                    <span :class="'reconciliation-badge ' + (session.reconciliation_status || 'pending')">
                      {{ session.reconciliation_status || 'Pending' }}
                    </span>
                  </td>
                  <td>
                    <button 
                      v-if="session.reconciliation_status !== 'reconciled'"
                      @click="updateReconciliationStatus(session.id, 'reconciled')"
                      class="btn btn-sm btn-success"
                    >
                      Mark Reconciled
                    </button>
                    <button 
                      v-else
                      @click="updateReconciliationStatus(session.id, 'pending')"
                      class="btn btn-sm btn-warning"
                    >
                      Mark Pending
                    </button>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        
        <!-- Performance Metrics -->
        <div class="report-section">
          <h5>ðŸ“ˆ Performance Metrics</h5>
          <div class="performance-metrics">
            <div class="metric-card">
              <div class="metric-title">Average per Session</div>
              <div class="metric-value">{{ calculateAveragePerSession(selectedCollectorReport) }}</div>
            </div>
            <div class="metric-card">
              <div class="metric-title">Most Active Currency</div>
              <div class="metric-value">{{ getMostActiveCurrency(selectedCollectorReport) }}</div>
            </div>
            <div class="metric-card">
              <div class="metric-title">Reconciliation Rate</div>
              <div class="metric-value">{{ calculateReconciliationRate(selectedCollectorReport.collector_its_id) }}%</div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="modal-footer">
        <button @click="exportCollectorReport(selectedCollectorReport)" class="btn btn-primary">
          ðŸ“„ Export Report
        </button>
        <button @click="closeFullReportModal" class="btn btn-secondary">
          Close
        </button>
      </div>
    </div>
  </div>
  
  <!-- ... -->
</template>

<script>
export default {
  // ...
  data() {
    return {
      // ...
      showFullReportModal: false,
      selectedCollectorReport: null,
    };
  },
  methods: {
    // ...
    viewCollectorFullReport(collector) {
      this.selectedCollectorReport = collector;
      this.showFullReportModal = true;
    },
    
    closeFullReportModal() {
      this.showFullReportModal = false;
      this.selectedCollectorReport = null;
    },
    
    calculateCurrencyPercentage(donationCount, totalDonations) {
      return (donationCount / totalDonations) * 100;
    },
    
    calculateAveragePerSession(collectorReport) {
      const totalAmount = collectorReport.currencies.reduce((acc, currency) => acc + currency.total_amount, 0);
      return totalAmount / collectorReport.total_sessions;
    },
    
    getMostActiveCurrency(collectorReport) {
      const mostActiveCurrency = collectorReport.currencies.reduce((max, currency) => {
        if (currency.donation_count > max.donation_count) return currency;
        return max;
      }, collectorReport.currencies[0]);
      return mostActiveCurrency.currency;
    },
    
    calculateReconciliationRate(collectorId) {
      const reconciledSessions = this.getReconciledSessionsCount(collectorId);
      const totalSessions = this.getCollectorSessions(collectorId).length;
      return (reconciledSessions / totalSessions) * 100;
    },
  },
};
</script>

<style scoped>
/* ... */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
}

.modal-content {
  background: white;
  padding: 2rem;
  border-radius: 12px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 80%;
  max-width: 800px;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1rem;
}

.close-btn {
  font-size: 1.5rem;
  cursor: pointer;
}

.collector-report-header {
  display: flex;
  align-items: center;
  gap: 2rem;
  margin-bottom: 2rem;
}

.collector-info-large {
  flex: 1;
}

.collector-summary-stats {
  display: flex;
  align-items: center;
  gap: 2rem;
}

.summary-stat {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.stat-number {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.stat-label {
  font-size: 0.9rem;
  color: #7f8c8d;
}

.report-section {
  margin-bottom: 2rem;
}

.report-section h5 {
  margin-bottom: 1rem;
}

.currency-breakdown-detailed {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.currency-detail-row {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  border-bottom: 1px solid #e1e8ed;
}

.currency-symbol-large {
  font-size: 2rem;
  font-weight: bold;
  color: #27ae60;
  width: 40px;
  text-align: center;
}

.currency-details {
  flex: 1;
}

.currency-name {
  font-size: 1.1rem;
  font-weight: 600;
  color: #2c3e50;
  margin-bottom: 0.25rem;
}

.currency-amount-large {
  font-size: 1.1rem;
  font-weight: 600;
  color: #2c3e50;
  margin-bottom: 0.25rem;
}

.currency-donations {
  font-size: 0.9rem;
  color: #95a5a6;
}

.currency-percentage {
  font-size: 1.1rem;
  font-weight: 600;
  color: #2c3e50;
}

.session-details-table {
  margin-top: 1rem;
}

.session-details-table table {
  width: 100%;
  border-collapse: collapse;
}

.session-details-table th,
.session-details-table td {
  padding: 0.75rem;
  text-align: left;
  border-bottom: 1px solid #e1e8ed;
}

.session-details-table th {
  background: #f8f9fa;
  font-weight: 600;
  color: #2c3e50;
  font-size: 0.9rem;
}

.session-details-table tr:hover {
  background: #f8f9fa;
}

.performance-metrics {
  display: flex;
  gap: 2rem;
}

.metric-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1rem;
  border: 1px solid #e1e8ed;
  border-radius: 8px;
  background: #f8f9fa;
}

.metric-title {
  font-size: 0.9rem;
  color: #7f8c8d;
  margin-bottom: 0.5rem;
}

.metric-value {
  font-size: 1.5rem;
  font-weight: 600;
  color: #2c3e50;
}

.modal-footer {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-top: 2rem;
}
</style>
